/*
 * Ed-Fi Operational Data Store API
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package Models.EnrollmentComposites;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * SchoolEducationOrganizationAddress
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-06-28T14:58:13.622-05:00[America/Mexico_City]")
public class SchoolEducationOrganizationAddress {
  public static final String SERIALIZED_NAME_ADDRESS_TYPE_DESCRIPTOR = "addressTypeDescriptor";
  @SerializedName(SERIALIZED_NAME_ADDRESS_TYPE_DESCRIPTOR)
  private String addressTypeDescriptor;

  public static final String SERIALIZED_NAME_STREET_NUMBER_NAME = "streetNumberName";
  @SerializedName(SERIALIZED_NAME_STREET_NUMBER_NAME)
  private String streetNumberName;

  public static final String SERIALIZED_NAME_CITY = "city";
  @SerializedName(SERIALIZED_NAME_CITY)
  private String city;

  public static final String SERIALIZED_NAME_STATE_ABBREVIATION_DESCRIPTOR = "stateAbbreviationDescriptor";
  @SerializedName(SERIALIZED_NAME_STATE_ABBREVIATION_DESCRIPTOR)
  private String stateAbbreviationDescriptor;

  public static final String SERIALIZED_NAME_POSTAL_CODE = "postalCode";
  @SerializedName(SERIALIZED_NAME_POSTAL_CODE)
  private String postalCode;

  public static final String SERIALIZED_NAME_NAME_OF_COUNTY = "nameOfCounty";
  @SerializedName(SERIALIZED_NAME_NAME_OF_COUNTY)
  private String nameOfCounty;

  public SchoolEducationOrganizationAddress() { 
  }

  public SchoolEducationOrganizationAddress addressTypeDescriptor(String addressTypeDescriptor) {
    
    this.addressTypeDescriptor = addressTypeDescriptor;
    return this;
  }

   /**
   * The type of address listed for an individual or organization.    For example:  Physical Address, Mailing Address, Home Address, etc.)
   * @return addressTypeDescriptor
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The type of address listed for an individual or organization.    For example:  Physical Address, Mailing Address, Home Address, etc.)")

  public String getAddressTypeDescriptor() {
    return addressTypeDescriptor;
  }


  public void setAddressTypeDescriptor(String addressTypeDescriptor) {
    this.addressTypeDescriptor = addressTypeDescriptor;
  }


  public SchoolEducationOrganizationAddress streetNumberName(String streetNumberName) {
    
    this.streetNumberName = streetNumberName;
    return this;
  }

   /**
   * The street number and street name or post office box number of an address.
   * @return streetNumberName
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The street number and street name or post office box number of an address.")

  public String getStreetNumberName() {
    return streetNumberName;
  }


  public void setStreetNumberName(String streetNumberName) {
    this.streetNumberName = streetNumberName;
  }


  public SchoolEducationOrganizationAddress city(String city) {
    
    this.city = city;
    return this;
  }

   /**
   * The name of the city in which an address is located.
   * @return city
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The name of the city in which an address is located.")

  public String getCity() {
    return city;
  }


  public void setCity(String city) {
    this.city = city;
  }


  public SchoolEducationOrganizationAddress stateAbbreviationDescriptor(String stateAbbreviationDescriptor) {
    
    this.stateAbbreviationDescriptor = stateAbbreviationDescriptor;
    return this;
  }

   /**
   * The abbreviation for the state (within the United States) or outlying area in which an address is located.
   * @return stateAbbreviationDescriptor
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The abbreviation for the state (within the United States) or outlying area in which an address is located.")

  public String getStateAbbreviationDescriptor() {
    return stateAbbreviationDescriptor;
  }


  public void setStateAbbreviationDescriptor(String stateAbbreviationDescriptor) {
    this.stateAbbreviationDescriptor = stateAbbreviationDescriptor;
  }


  public SchoolEducationOrganizationAddress postalCode(String postalCode) {
    
    this.postalCode = postalCode;
    return this;
  }

   /**
   * The five or nine digit zip code or overseas postal code portion of an address.
   * @return postalCode
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The five or nine digit zip code or overseas postal code portion of an address.")

  public String getPostalCode() {
    return postalCode;
  }


  public void setPostalCode(String postalCode) {
    this.postalCode = postalCode;
  }


  public SchoolEducationOrganizationAddress nameOfCounty(String nameOfCounty) {
    
    this.nameOfCounty = nameOfCounty;
    return this;
  }

   /**
   * The name of the county, parish, borough, or comparable unit (within a state) in                       &#39;which an address is located.
   * @return nameOfCounty
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The name of the county, parish, borough, or comparable unit (within a state) in                       'which an address is located.")

  public String getNameOfCounty() {
    return nameOfCounty;
  }


  public void setNameOfCounty(String nameOfCounty) {
    this.nameOfCounty = nameOfCounty;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SchoolEducationOrganizationAddress schoolEducationOrganizationAddress = (SchoolEducationOrganizationAddress) o;
    return Objects.equals(this.addressTypeDescriptor, schoolEducationOrganizationAddress.addressTypeDescriptor) &&
        Objects.equals(this.streetNumberName, schoolEducationOrganizationAddress.streetNumberName) &&
        Objects.equals(this.city, schoolEducationOrganizationAddress.city) &&
        Objects.equals(this.stateAbbreviationDescriptor, schoolEducationOrganizationAddress.stateAbbreviationDescriptor) &&
        Objects.equals(this.postalCode, schoolEducationOrganizationAddress.postalCode) &&
        Objects.equals(this.nameOfCounty, schoolEducationOrganizationAddress.nameOfCounty);
  }

  @Override
  public int hashCode() {
    return Objects.hash(addressTypeDescriptor, streetNumberName, city, stateAbbreviationDescriptor, postalCode, nameOfCounty);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SchoolEducationOrganizationAddress {\n");
    sb.append("    addressTypeDescriptor: ").append(toIndentedString(addressTypeDescriptor)).append("\n");
    sb.append("    streetNumberName: ").append(toIndentedString(streetNumberName)).append("\n");
    sb.append("    city: ").append(toIndentedString(city)).append("\n");
    sb.append("    stateAbbreviationDescriptor: ").append(toIndentedString(stateAbbreviationDescriptor)).append("\n");
    sb.append("    postalCode: ").append(toIndentedString(postalCode)).append("\n");
    sb.append("    nameOfCounty: ").append(toIndentedString(nameOfCounty)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

