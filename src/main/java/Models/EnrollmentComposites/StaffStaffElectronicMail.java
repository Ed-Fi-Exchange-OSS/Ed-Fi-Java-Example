/*
 * Ed-Fi Operational Data Store API
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package Models.EnrollmentComposites;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * StaffStaffElectronicMail
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-06-28T14:58:13.622-05:00[America/Mexico_City]")
public class StaffStaffElectronicMail {
  public static final String SERIALIZED_NAME_ELECTRONIC_MAIL_TYPE_DESCRIPTOR = "electronicMailTypeDescriptor";
  @SerializedName(SERIALIZED_NAME_ELECTRONIC_MAIL_TYPE_DESCRIPTOR)
  private String electronicMailTypeDescriptor;

  public static final String SERIALIZED_NAME_ELECTRONIC_MAIL_ADDRESS = "electronicMailAddress";
  @SerializedName(SERIALIZED_NAME_ELECTRONIC_MAIL_ADDRESS)
  private String electronicMailAddress;

  public StaffStaffElectronicMail() { 
  }

  public StaffStaffElectronicMail electronicMailTypeDescriptor(String electronicMailTypeDescriptor) {
    
    this.electronicMailTypeDescriptor = electronicMailTypeDescriptor;
    return this;
  }

   /**
   * The type of email listed for an individual or organization. For example: Home/Personal, Work, etc.)
   * @return electronicMailTypeDescriptor
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The type of email listed for an individual or organization. For example: Home/Personal, Work, etc.)")

  public String getElectronicMailTypeDescriptor() {
    return electronicMailTypeDescriptor;
  }


  public void setElectronicMailTypeDescriptor(String electronicMailTypeDescriptor) {
    this.electronicMailTypeDescriptor = electronicMailTypeDescriptor;
  }


  public StaffStaffElectronicMail electronicMailAddress(String electronicMailAddress) {
    
    this.electronicMailAddress = electronicMailAddress;
    return this;
  }

   /**
   * The electronic mail (e-mail) address listed for an individual or organization.
   * @return electronicMailAddress
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The electronic mail (e-mail) address listed for an individual or organization.")

  public String getElectronicMailAddress() {
    return electronicMailAddress;
  }


  public void setElectronicMailAddress(String electronicMailAddress) {
    this.electronicMailAddress = electronicMailAddress;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StaffStaffElectronicMail staffStaffElectronicMail = (StaffStaffElectronicMail) o;
    return Objects.equals(this.electronicMailTypeDescriptor, staffStaffElectronicMail.electronicMailTypeDescriptor) &&
        Objects.equals(this.electronicMailAddress, staffStaffElectronicMail.electronicMailAddress);
  }

  @Override
  public int hashCode() {
    return Objects.hash(electronicMailTypeDescriptor, electronicMailAddress);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StaffStaffElectronicMail {\n");
    sb.append("    electronicMailTypeDescriptor: ").append(toIndentedString(electronicMailTypeDescriptor)).append("\n");
    sb.append("    electronicMailAddress: ").append(toIndentedString(electronicMailAddress)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

