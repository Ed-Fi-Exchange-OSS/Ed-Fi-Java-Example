/*
 * Ed-Fi Operational Data Store API
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package Models.Resources;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * EdFiGraduationPlanCreditsBySubject
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-06-28T14:58:32.034-05:00[America/Mexico_City]")
public class EdFiGraduationPlanCreditsBySubject {
  public static final String SERIALIZED_NAME_ACADEMIC_SUBJECT_DESCRIPTOR = "academicSubjectDescriptor";
  @SerializedName(SERIALIZED_NAME_ACADEMIC_SUBJECT_DESCRIPTOR)
  private String academicSubjectDescriptor;

  public static final String SERIALIZED_NAME_CREDIT_TYPE_DESCRIPTOR = "creditTypeDescriptor";
  @SerializedName(SERIALIZED_NAME_CREDIT_TYPE_DESCRIPTOR)
  private String creditTypeDescriptor;

  public static final String SERIALIZED_NAME_CREDIT_CONVERSION = "creditConversion";
  @SerializedName(SERIALIZED_NAME_CREDIT_CONVERSION)
  private Double creditConversion;

  public static final String SERIALIZED_NAME_CREDITS = "credits";
  @SerializedName(SERIALIZED_NAME_CREDITS)
  private Double credits;

  public EdFiGraduationPlanCreditsBySubject() { 
  }

  public EdFiGraduationPlanCreditsBySubject academicSubjectDescriptor(String academicSubjectDescriptor) {
    
    this.academicSubjectDescriptor = academicSubjectDescriptor;
    return this;
  }

   /**
   * The intended major subject area of the graduation requirement.
   * @return academicSubjectDescriptor
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The intended major subject area of the graduation requirement.")

  public String getAcademicSubjectDescriptor() {
    return academicSubjectDescriptor;
  }


  public void setAcademicSubjectDescriptor(String academicSubjectDescriptor) {
    this.academicSubjectDescriptor = academicSubjectDescriptor;
  }


  public EdFiGraduationPlanCreditsBySubject creditTypeDescriptor(String creditTypeDescriptor) {
    
    this.creditTypeDescriptor = creditTypeDescriptor;
    return this;
  }

   /**
   * The type of credits or units of value awarded for the completion of a course.
   * @return creditTypeDescriptor
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The type of credits or units of value awarded for the completion of a course.")

  public String getCreditTypeDescriptor() {
    return creditTypeDescriptor;
  }


  public void setCreditTypeDescriptor(String creditTypeDescriptor) {
    this.creditTypeDescriptor = creditTypeDescriptor;
  }


  public EdFiGraduationPlanCreditsBySubject creditConversion(Double creditConversion) {
    
    this.creditConversion = creditConversion;
    return this;
  }

   /**
   * Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units.
   * @return creditConversion
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units.")

  public Double getCreditConversion() {
    return creditConversion;
  }


  public void setCreditConversion(Double creditConversion) {
    this.creditConversion = creditConversion;
  }


  public EdFiGraduationPlanCreditsBySubject credits(Double credits) {
    
    this.credits = credits;
    return this;
  }

   /**
   * The value of credits or units of value awarded for the completion of a course.
   * @return credits
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The value of credits or units of value awarded for the completion of a course.")

  public Double getCredits() {
    return credits;
  }


  public void setCredits(Double credits) {
    this.credits = credits;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EdFiGraduationPlanCreditsBySubject edFiGraduationPlanCreditsBySubject = (EdFiGraduationPlanCreditsBySubject) o;
    return Objects.equals(this.academicSubjectDescriptor, edFiGraduationPlanCreditsBySubject.academicSubjectDescriptor) &&
        Objects.equals(this.creditTypeDescriptor, edFiGraduationPlanCreditsBySubject.creditTypeDescriptor) &&
        Objects.equals(this.creditConversion, edFiGraduationPlanCreditsBySubject.creditConversion) &&
        Objects.equals(this.credits, edFiGraduationPlanCreditsBySubject.credits);
  }

  @Override
  public int hashCode() {
    return Objects.hash(academicSubjectDescriptor, creditTypeDescriptor, creditConversion, credits);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EdFiGraduationPlanCreditsBySubject {\n");
    sb.append("    academicSubjectDescriptor: ").append(toIndentedString(academicSubjectDescriptor)).append("\n");
    sb.append("    creditTypeDescriptor: ").append(toIndentedString(creditTypeDescriptor)).append("\n");
    sb.append("    creditConversion: ").append(toIndentedString(creditConversion)).append("\n");
    sb.append("    credits: ").append(toIndentedString(credits)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

