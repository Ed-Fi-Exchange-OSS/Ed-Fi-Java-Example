/*
 * Ed-Fi Operational Data Store API
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package Models.Resources;

import java.util.Objects;
import java.util.Arrays;
import Models.Resources.EdFiGraduationPlanCreditsByCourseCourse;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * EdFiGraduationPlanCreditsByCourse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-06-28T14:58:32.034-05:00[America/Mexico_City]")
public class EdFiGraduationPlanCreditsByCourse {
  public static final String SERIALIZED_NAME_COURSE_SET_NAME = "courseSetName";
  @SerializedName(SERIALIZED_NAME_COURSE_SET_NAME)
  private String courseSetName;

  public static final String SERIALIZED_NAME_CREDIT_TYPE_DESCRIPTOR = "creditTypeDescriptor";
  @SerializedName(SERIALIZED_NAME_CREDIT_TYPE_DESCRIPTOR)
  private String creditTypeDescriptor;

  public static final String SERIALIZED_NAME_WHEN_TAKEN_GRADE_LEVEL_DESCRIPTOR = "whenTakenGradeLevelDescriptor";
  @SerializedName(SERIALIZED_NAME_WHEN_TAKEN_GRADE_LEVEL_DESCRIPTOR)
  private String whenTakenGradeLevelDescriptor;

  public static final String SERIALIZED_NAME_CREDIT_CONVERSION = "creditConversion";
  @SerializedName(SERIALIZED_NAME_CREDIT_CONVERSION)
  private Double creditConversion;

  public static final String SERIALIZED_NAME_CREDITS = "credits";
  @SerializedName(SERIALIZED_NAME_CREDITS)
  private Double credits;

  public static final String SERIALIZED_NAME_COURSES = "courses";
  @SerializedName(SERIALIZED_NAME_COURSES)
  private List<EdFiGraduationPlanCreditsByCourseCourse> courses = new ArrayList<EdFiGraduationPlanCreditsByCourseCourse>();

  public EdFiGraduationPlanCreditsByCourse() { 
  }

  public EdFiGraduationPlanCreditsByCourse courseSetName(String courseSetName) {
    
    this.courseSetName = courseSetName;
    return this;
  }

   /**
   * Identifying name given to a collection of courses.
   * @return courseSetName
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Identifying name given to a collection of courses.")

  public String getCourseSetName() {
    return courseSetName;
  }


  public void setCourseSetName(String courseSetName) {
    this.courseSetName = courseSetName;
  }


  public EdFiGraduationPlanCreditsByCourse creditTypeDescriptor(String creditTypeDescriptor) {
    
    this.creditTypeDescriptor = creditTypeDescriptor;
    return this;
  }

   /**
   * The type of credits or units of value awarded for the completion of a course.
   * @return creditTypeDescriptor
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The type of credits or units of value awarded for the completion of a course.")

  public String getCreditTypeDescriptor() {
    return creditTypeDescriptor;
  }


  public void setCreditTypeDescriptor(String creditTypeDescriptor) {
    this.creditTypeDescriptor = creditTypeDescriptor;
  }


  public EdFiGraduationPlanCreditsByCourse whenTakenGradeLevelDescriptor(String whenTakenGradeLevelDescriptor) {
    
    this.whenTakenGradeLevelDescriptor = whenTakenGradeLevelDescriptor;
    return this;
  }

   /**
   * The grade level when the student is planned to take the course.
   * @return whenTakenGradeLevelDescriptor
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The grade level when the student is planned to take the course.")

  public String getWhenTakenGradeLevelDescriptor() {
    return whenTakenGradeLevelDescriptor;
  }


  public void setWhenTakenGradeLevelDescriptor(String whenTakenGradeLevelDescriptor) {
    this.whenTakenGradeLevelDescriptor = whenTakenGradeLevelDescriptor;
  }


  public EdFiGraduationPlanCreditsByCourse creditConversion(Double creditConversion) {
    
    this.creditConversion = creditConversion;
    return this;
  }

   /**
   * Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units.
   * @return creditConversion
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units.")

  public Double getCreditConversion() {
    return creditConversion;
  }


  public void setCreditConversion(Double creditConversion) {
    this.creditConversion = creditConversion;
  }


  public EdFiGraduationPlanCreditsByCourse credits(Double credits) {
    
    this.credits = credits;
    return this;
  }

   /**
   * The value of credits or units of value awarded for the completion of a course.
   * @return credits
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The value of credits or units of value awarded for the completion of a course.")

  public Double getCredits() {
    return credits;
  }


  public void setCredits(Double credits) {
    this.credits = credits;
  }


  public EdFiGraduationPlanCreditsByCourse courses(List<EdFiGraduationPlanCreditsByCourseCourse> courses) {
    
    this.courses = courses;
    return this;
  }

  public EdFiGraduationPlanCreditsByCourse addCoursesItem(EdFiGraduationPlanCreditsByCourseCourse coursesItem) {
    this.courses.add(coursesItem);
    return this;
  }

   /**
   * An unordered collection of graduationPlanCreditsByCourseCourses. The course reference that identifies the organization of subject matter and related learning experiences provided for the instruction of students.
   * @return courses
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "An unordered collection of graduationPlanCreditsByCourseCourses. The course reference that identifies the organization of subject matter and related learning experiences provided for the instruction of students.")

  public List<EdFiGraduationPlanCreditsByCourseCourse> getCourses() {
    return courses;
  }


  public void setCourses(List<EdFiGraduationPlanCreditsByCourseCourse> courses) {
    this.courses = courses;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EdFiGraduationPlanCreditsByCourse edFiGraduationPlanCreditsByCourse = (EdFiGraduationPlanCreditsByCourse) o;
    return Objects.equals(this.courseSetName, edFiGraduationPlanCreditsByCourse.courseSetName) &&
        Objects.equals(this.creditTypeDescriptor, edFiGraduationPlanCreditsByCourse.creditTypeDescriptor) &&
        Objects.equals(this.whenTakenGradeLevelDescriptor, edFiGraduationPlanCreditsByCourse.whenTakenGradeLevelDescriptor) &&
        Objects.equals(this.creditConversion, edFiGraduationPlanCreditsByCourse.creditConversion) &&
        Objects.equals(this.credits, edFiGraduationPlanCreditsByCourse.credits) &&
        Objects.equals(this.courses, edFiGraduationPlanCreditsByCourse.courses);
  }

  @Override
  public int hashCode() {
    return Objects.hash(courseSetName, creditTypeDescriptor, whenTakenGradeLevelDescriptor, creditConversion, credits, courses);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EdFiGraduationPlanCreditsByCourse {\n");
    sb.append("    courseSetName: ").append(toIndentedString(courseSetName)).append("\n");
    sb.append("    creditTypeDescriptor: ").append(toIndentedString(creditTypeDescriptor)).append("\n");
    sb.append("    whenTakenGradeLevelDescriptor: ").append(toIndentedString(whenTakenGradeLevelDescriptor)).append("\n");
    sb.append("    creditConversion: ").append(toIndentedString(creditConversion)).append("\n");
    sb.append("    credits: ").append(toIndentedString(credits)).append("\n");
    sb.append("    courses: ").append(toIndentedString(courses)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

