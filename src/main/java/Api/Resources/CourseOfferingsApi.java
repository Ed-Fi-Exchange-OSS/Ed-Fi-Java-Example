/*
 * Ed-Fi Operational Data Store API
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package Api.Resources;

import Api.ApiCallback;
import Api.ApiClient;
import Api.ApiException;
import Api.ApiResponse;
import Api.Configuration;
import Api.Pair;
import Api.ProgressRequestBody;
import Api.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import Models.Resources.DeletedResource;
import Models.Resources.EdFiCourseOffering;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CourseOfferingsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CourseOfferingsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CourseOfferingsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for deleteCourseOfferingById
     * @param id A resource identifier that uniquely identifies the resource. (required)
     * @param ifMatch The ETag header value used to prevent the DELETE from removing a resource modified by another consumer. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was successfully deleted. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The resource could not be found. </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Is Not Allowed. When the Snapshot-Identifier header is present the method is not allowed. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details. </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> The resource&#39;s current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unhandled error occurred on the server. See the response body for details. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteCourseOfferingByIdCall(String id, String ifMatch, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ed-fi/courseOfferings/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (ifMatch != null) {
            localVarHeaderParams.put("If-Match", localVarApiClient.parameterToString(ifMatch));
        }

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2_client_credentials" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteCourseOfferingByIdValidateBeforeCall(String id, String ifMatch, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteCourseOfferingById(Async)");
        }
        

        okhttp3.Call localVarCall = deleteCourseOfferingByIdCall(id, ifMatch, _callback);
        return localVarCall;

    }

    /**
     * Deletes an existing resource using the resource identifier.
     * The DELETE operation is used to delete an existing resource by identifier. If the resource doesn&#39;t exist, an error will result (the resource will not be found).
     * @param id A resource identifier that uniquely identifies the resource. (required)
     * @param ifMatch The ETag header value used to prevent the DELETE from removing a resource modified by another consumer. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was successfully deleted. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The resource could not be found. </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Is Not Allowed. When the Snapshot-Identifier header is present the method is not allowed. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details. </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> The resource&#39;s current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unhandled error occurred on the server. See the response body for details. </td><td>  -  </td></tr>
     </table>
     */
    public void deleteCourseOfferingById(String id, String ifMatch) throws ApiException {
        deleteCourseOfferingByIdWithHttpInfo(id, ifMatch);
    }

    /**
     * Deletes an existing resource using the resource identifier.
     * The DELETE operation is used to delete an existing resource by identifier. If the resource doesn&#39;t exist, an error will result (the resource will not be found).
     * @param id A resource identifier that uniquely identifies the resource. (required)
     * @param ifMatch The ETag header value used to prevent the DELETE from removing a resource modified by another consumer. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was successfully deleted. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The resource could not be found. </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Is Not Allowed. When the Snapshot-Identifier header is present the method is not allowed. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details. </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> The resource&#39;s current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unhandled error occurred on the server. See the response body for details. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteCourseOfferingByIdWithHttpInfo(String id, String ifMatch) throws ApiException {
        okhttp3.Call localVarCall = deleteCourseOfferingByIdValidateBeforeCall(id, ifMatch, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Deletes an existing resource using the resource identifier. (asynchronously)
     * The DELETE operation is used to delete an existing resource by identifier. If the resource doesn&#39;t exist, an error will result (the resource will not be found).
     * @param id A resource identifier that uniquely identifies the resource. (required)
     * @param ifMatch The ETag header value used to prevent the DELETE from removing a resource modified by another consumer. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was successfully deleted. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The resource could not be found. </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Is Not Allowed. When the Snapshot-Identifier header is present the method is not allowed. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details. </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> The resource&#39;s current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unhandled error occurred on the server. See the response body for details. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteCourseOfferingByIdAsync(String id, String ifMatch, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteCourseOfferingByIdValidateBeforeCall(id, ifMatch, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deletesCourseOfferings
     * @param offset Indicates how many items should be skipped before returning results. (optional, default to 0)
     * @param limit Indicates the maximum number of items that should be returned in the results. (optional, default to 25)
     * @param minChangeVersion Used in synchronization to set sequence minimum ChangeVersion (optional)
     * @param maxChangeVersion Used in synchronization to set sequence maximum ChangeVersion (optional)
     * @param snapshotIdentifier Indicates the Snapshot-Identifier that should be used. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The requested resource was successfully retrieved. </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> The resource&#39;s current server-side ETag value matched the If-None-Match header value supplied with the request indicating the resource has not been modified. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The resource could not be found. </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone. An attempt to connect to the database for the snapshot specified by the Snapshot-Identifier header was unsuccessful (indicating the snapshot may have been removed). </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unhandled error occurred on the server. See the response body for details. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deletesCourseOfferingsCall(Integer offset, Integer limit, Integer minChangeVersion, Integer maxChangeVersion, String snapshotIdentifier, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ed-fi/courseOfferings/deletes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (minChangeVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minChangeVersion", minChangeVersion));
        }

        if (maxChangeVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxChangeVersion", maxChangeVersion));
        }

        if (snapshotIdentifier != null) {
            localVarHeaderParams.put("Snapshot-Identifier", localVarApiClient.parameterToString(snapshotIdentifier));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2_client_credentials" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deletesCourseOfferingsValidateBeforeCall(Integer offset, Integer limit, Integer minChangeVersion, Integer maxChangeVersion, String snapshotIdentifier, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = deletesCourseOfferingsCall(offset, limit, minChangeVersion, maxChangeVersion, snapshotIdentifier, _callback);
        return localVarCall;

    }

    /**
     * Retrieves deleted resources based on change version.
     * The DELETES operation is used to retrieve deleted resources.
     * @param offset Indicates how many items should be skipped before returning results. (optional, default to 0)
     * @param limit Indicates the maximum number of items that should be returned in the results. (optional, default to 25)
     * @param minChangeVersion Used in synchronization to set sequence minimum ChangeVersion (optional)
     * @param maxChangeVersion Used in synchronization to set sequence maximum ChangeVersion (optional)
     * @param snapshotIdentifier Indicates the Snapshot-Identifier that should be used. (optional)
     * @return List&lt;DeletedResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The requested resource was successfully retrieved. </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> The resource&#39;s current server-side ETag value matched the If-None-Match header value supplied with the request indicating the resource has not been modified. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The resource could not be found. </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone. An attempt to connect to the database for the snapshot specified by the Snapshot-Identifier header was unsuccessful (indicating the snapshot may have been removed). </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unhandled error occurred on the server. See the response body for details. </td><td>  -  </td></tr>
     </table>
     */
    public List<DeletedResource> deletesCourseOfferings(Integer offset, Integer limit, Integer minChangeVersion, Integer maxChangeVersion, String snapshotIdentifier) throws ApiException {
        ApiResponse<List<DeletedResource>> localVarResp = deletesCourseOfferingsWithHttpInfo(offset, limit, minChangeVersion, maxChangeVersion, snapshotIdentifier);
        return localVarResp.getData();
    }

    /**
     * Retrieves deleted resources based on change version.
     * The DELETES operation is used to retrieve deleted resources.
     * @param offset Indicates how many items should be skipped before returning results. (optional, default to 0)
     * @param limit Indicates the maximum number of items that should be returned in the results. (optional, default to 25)
     * @param minChangeVersion Used in synchronization to set sequence minimum ChangeVersion (optional)
     * @param maxChangeVersion Used in synchronization to set sequence maximum ChangeVersion (optional)
     * @param snapshotIdentifier Indicates the Snapshot-Identifier that should be used. (optional)
     * @return ApiResponse&lt;List&lt;DeletedResource&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The requested resource was successfully retrieved. </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> The resource&#39;s current server-side ETag value matched the If-None-Match header value supplied with the request indicating the resource has not been modified. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The resource could not be found. </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone. An attempt to connect to the database for the snapshot specified by the Snapshot-Identifier header was unsuccessful (indicating the snapshot may have been removed). </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unhandled error occurred on the server. See the response body for details. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<DeletedResource>> deletesCourseOfferingsWithHttpInfo(Integer offset, Integer limit, Integer minChangeVersion, Integer maxChangeVersion, String snapshotIdentifier) throws ApiException {
        okhttp3.Call localVarCall = deletesCourseOfferingsValidateBeforeCall(offset, limit, minChangeVersion, maxChangeVersion, snapshotIdentifier, null);
        Type localVarReturnType = new TypeToken<List<DeletedResource>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves deleted resources based on change version. (asynchronously)
     * The DELETES operation is used to retrieve deleted resources.
     * @param offset Indicates how many items should be skipped before returning results. (optional, default to 0)
     * @param limit Indicates the maximum number of items that should be returned in the results. (optional, default to 25)
     * @param minChangeVersion Used in synchronization to set sequence minimum ChangeVersion (optional)
     * @param maxChangeVersion Used in synchronization to set sequence maximum ChangeVersion (optional)
     * @param snapshotIdentifier Indicates the Snapshot-Identifier that should be used. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The requested resource was successfully retrieved. </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> The resource&#39;s current server-side ETag value matched the If-None-Match header value supplied with the request indicating the resource has not been modified. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The resource could not be found. </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone. An attempt to connect to the database for the snapshot specified by the Snapshot-Identifier header was unsuccessful (indicating the snapshot may have been removed). </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unhandled error occurred on the server. See the response body for details. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deletesCourseOfferingsAsync(Integer offset, Integer limit, Integer minChangeVersion, Integer maxChangeVersion, String snapshotIdentifier, final ApiCallback<List<DeletedResource>> _callback) throws ApiException {

        okhttp3.Call localVarCall = deletesCourseOfferingsValidateBeforeCall(offset, limit, minChangeVersion, maxChangeVersion, snapshotIdentifier, _callback);
        Type localVarReturnType = new TypeToken<List<DeletedResource>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCourseOfferings
     * @param offset Indicates how many items should be skipped before returning results. (optional, default to 0)
     * @param limit Indicates the maximum number of items that should be returned in the results. (optional, default to 25)
     * @param minChangeVersion Used in synchronization to set sequence minimum ChangeVersion (optional)
     * @param maxChangeVersion Used in synchronization to set sequence maximum ChangeVersion (optional)
     * @param totalCount Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. (optional, default to false)
     * @param localCourseCode The local code assigned by the School that identifies the course offering provided for the instruction of students. (optional)
     * @param schoolId The identifier assigned to a school. (optional)
     * @param schoolYear The identifier for the school year. (optional)
     * @param sessionName The identifier for the calendar for the academic session (e.g., 2010/11, 2011 Summer). (optional)
     * @param courseCode A unique alphanumeric code assigned to a course. (optional)
     * @param educationOrganizationId The identifier assigned to an education organization. (optional)
     * @param id  (optional)
     * @param instructionalTimePlanned The planned total number of clock minutes of instruction for this course offering. Generally, this should be at least as many minutes as is required for completion by the related state- or district-defined course. (optional)
     * @param localCourseTitle The descriptive name given to a course of study offered in the school, if different from the CourseTitle. (optional)
     * @param snapshotIdentifier Indicates the Snapshot-Identifier that should be used. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The requested resource was successfully retrieved. </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> The resource&#39;s current server-side ETag value matched the If-None-Match header value supplied with the request indicating the resource has not been modified. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The resource could not be found. </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone. An attempt to connect to the database for the snapshot specified by the Snapshot-Identifier header was unsuccessful (indicating the snapshot may have been removed). </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unhandled error occurred on the server. See the response body for details. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCourseOfferingsCall(Integer offset, Integer limit, Integer minChangeVersion, Integer maxChangeVersion, Boolean totalCount, String localCourseCode, Integer schoolId, Integer schoolYear, String sessionName, String courseCode, Integer educationOrganizationId, String id, Integer instructionalTimePlanned, String localCourseTitle, String snapshotIdentifier, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ed-fi/courseOfferings";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (minChangeVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minChangeVersion", minChangeVersion));
        }

        if (maxChangeVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxChangeVersion", maxChangeVersion));
        }

        if (totalCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("totalCount", totalCount));
        }

        if (localCourseCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("localCourseCode", localCourseCode));
        }

        if (schoolId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("schoolId", schoolId));
        }

        if (schoolYear != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("schoolYear", schoolYear));
        }

        if (sessionName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sessionName", sessionName));
        }

        if (courseCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("courseCode", courseCode));
        }

        if (educationOrganizationId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("educationOrganizationId", educationOrganizationId));
        }

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (instructionalTimePlanned != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("instructionalTimePlanned", instructionalTimePlanned));
        }

        if (localCourseTitle != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("localCourseTitle", localCourseTitle));
        }

        if (snapshotIdentifier != null) {
            localVarHeaderParams.put("Snapshot-Identifier", localVarApiClient.parameterToString(snapshotIdentifier));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2_client_credentials" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCourseOfferingsValidateBeforeCall(Integer offset, Integer limit, Integer minChangeVersion, Integer maxChangeVersion, Boolean totalCount, String localCourseCode, Integer schoolId, Integer schoolYear, String sessionName, String courseCode, Integer educationOrganizationId, String id, Integer instructionalTimePlanned, String localCourseTitle, String snapshotIdentifier, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getCourseOfferingsCall(offset, limit, minChangeVersion, maxChangeVersion, totalCount, localCourseCode, schoolId, schoolYear, sessionName, courseCode, educationOrganizationId, id, instructionalTimePlanned, localCourseTitle, snapshotIdentifier, _callback);
        return localVarCall;

    }

    /**
     * Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern).
     * This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
     * @param offset Indicates how many items should be skipped before returning results. (optional, default to 0)
     * @param limit Indicates the maximum number of items that should be returned in the results. (optional, default to 25)
     * @param minChangeVersion Used in synchronization to set sequence minimum ChangeVersion (optional)
     * @param maxChangeVersion Used in synchronization to set sequence maximum ChangeVersion (optional)
     * @param totalCount Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. (optional, default to false)
     * @param localCourseCode The local code assigned by the School that identifies the course offering provided for the instruction of students. (optional)
     * @param schoolId The identifier assigned to a school. (optional)
     * @param schoolYear The identifier for the school year. (optional)
     * @param sessionName The identifier for the calendar for the academic session (e.g., 2010/11, 2011 Summer). (optional)
     * @param courseCode A unique alphanumeric code assigned to a course. (optional)
     * @param educationOrganizationId The identifier assigned to an education organization. (optional)
     * @param id  (optional)
     * @param instructionalTimePlanned The planned total number of clock minutes of instruction for this course offering. Generally, this should be at least as many minutes as is required for completion by the related state- or district-defined course. (optional)
     * @param localCourseTitle The descriptive name given to a course of study offered in the school, if different from the CourseTitle. (optional)
     * @param snapshotIdentifier Indicates the Snapshot-Identifier that should be used. (optional)
     * @return List&lt;EdFiCourseOffering&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The requested resource was successfully retrieved. </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> The resource&#39;s current server-side ETag value matched the If-None-Match header value supplied with the request indicating the resource has not been modified. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The resource could not be found. </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone. An attempt to connect to the database for the snapshot specified by the Snapshot-Identifier header was unsuccessful (indicating the snapshot may have been removed). </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unhandled error occurred on the server. See the response body for details. </td><td>  -  </td></tr>
     </table>
     */
    public List<EdFiCourseOffering> getCourseOfferings(Integer offset, Integer limit, Integer minChangeVersion, Integer maxChangeVersion, Boolean totalCount, String localCourseCode, Integer schoolId, Integer schoolYear, String sessionName, String courseCode, Integer educationOrganizationId, String id, Integer instructionalTimePlanned, String localCourseTitle, String snapshotIdentifier) throws ApiException {
        ApiResponse<List<EdFiCourseOffering>> localVarResp = getCourseOfferingsWithHttpInfo(offset, limit, minChangeVersion, maxChangeVersion, totalCount, localCourseCode, schoolId, schoolYear, sessionName, courseCode, educationOrganizationId, id, instructionalTimePlanned, localCourseTitle, snapshotIdentifier);
        return localVarResp.getData();
    }

    /**
     * Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern).
     * This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
     * @param offset Indicates how many items should be skipped before returning results. (optional, default to 0)
     * @param limit Indicates the maximum number of items that should be returned in the results. (optional, default to 25)
     * @param minChangeVersion Used in synchronization to set sequence minimum ChangeVersion (optional)
     * @param maxChangeVersion Used in synchronization to set sequence maximum ChangeVersion (optional)
     * @param totalCount Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. (optional, default to false)
     * @param localCourseCode The local code assigned by the School that identifies the course offering provided for the instruction of students. (optional)
     * @param schoolId The identifier assigned to a school. (optional)
     * @param schoolYear The identifier for the school year. (optional)
     * @param sessionName The identifier for the calendar for the academic session (e.g., 2010/11, 2011 Summer). (optional)
     * @param courseCode A unique alphanumeric code assigned to a course. (optional)
     * @param educationOrganizationId The identifier assigned to an education organization. (optional)
     * @param id  (optional)
     * @param instructionalTimePlanned The planned total number of clock minutes of instruction for this course offering. Generally, this should be at least as many minutes as is required for completion by the related state- or district-defined course. (optional)
     * @param localCourseTitle The descriptive name given to a course of study offered in the school, if different from the CourseTitle. (optional)
     * @param snapshotIdentifier Indicates the Snapshot-Identifier that should be used. (optional)
     * @return ApiResponse&lt;List&lt;EdFiCourseOffering&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The requested resource was successfully retrieved. </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> The resource&#39;s current server-side ETag value matched the If-None-Match header value supplied with the request indicating the resource has not been modified. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The resource could not be found. </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone. An attempt to connect to the database for the snapshot specified by the Snapshot-Identifier header was unsuccessful (indicating the snapshot may have been removed). </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unhandled error occurred on the server. See the response body for details. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<EdFiCourseOffering>> getCourseOfferingsWithHttpInfo(Integer offset, Integer limit, Integer minChangeVersion, Integer maxChangeVersion, Boolean totalCount, String localCourseCode, Integer schoolId, Integer schoolYear, String sessionName, String courseCode, Integer educationOrganizationId, String id, Integer instructionalTimePlanned, String localCourseTitle, String snapshotIdentifier) throws ApiException {
        okhttp3.Call localVarCall = getCourseOfferingsValidateBeforeCall(offset, limit, minChangeVersion, maxChangeVersion, totalCount, localCourseCode, schoolId, schoolYear, sessionName, courseCode, educationOrganizationId, id, instructionalTimePlanned, localCourseTitle, snapshotIdentifier, null);
        Type localVarReturnType = new TypeToken<List<EdFiCourseOffering>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern). (asynchronously)
     * This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
     * @param offset Indicates how many items should be skipped before returning results. (optional, default to 0)
     * @param limit Indicates the maximum number of items that should be returned in the results. (optional, default to 25)
     * @param minChangeVersion Used in synchronization to set sequence minimum ChangeVersion (optional)
     * @param maxChangeVersion Used in synchronization to set sequence maximum ChangeVersion (optional)
     * @param totalCount Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. (optional, default to false)
     * @param localCourseCode The local code assigned by the School that identifies the course offering provided for the instruction of students. (optional)
     * @param schoolId The identifier assigned to a school. (optional)
     * @param schoolYear The identifier for the school year. (optional)
     * @param sessionName The identifier for the calendar for the academic session (e.g., 2010/11, 2011 Summer). (optional)
     * @param courseCode A unique alphanumeric code assigned to a course. (optional)
     * @param educationOrganizationId The identifier assigned to an education organization. (optional)
     * @param id  (optional)
     * @param instructionalTimePlanned The planned total number of clock minutes of instruction for this course offering. Generally, this should be at least as many minutes as is required for completion by the related state- or district-defined course. (optional)
     * @param localCourseTitle The descriptive name given to a course of study offered in the school, if different from the CourseTitle. (optional)
     * @param snapshotIdentifier Indicates the Snapshot-Identifier that should be used. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The requested resource was successfully retrieved. </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> The resource&#39;s current server-side ETag value matched the If-None-Match header value supplied with the request indicating the resource has not been modified. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The resource could not be found. </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone. An attempt to connect to the database for the snapshot specified by the Snapshot-Identifier header was unsuccessful (indicating the snapshot may have been removed). </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unhandled error occurred on the server. See the response body for details. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCourseOfferingsAsync(Integer offset, Integer limit, Integer minChangeVersion, Integer maxChangeVersion, Boolean totalCount, String localCourseCode, Integer schoolId, Integer schoolYear, String sessionName, String courseCode, Integer educationOrganizationId, String id, Integer instructionalTimePlanned, String localCourseTitle, String snapshotIdentifier, final ApiCallback<List<EdFiCourseOffering>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCourseOfferingsValidateBeforeCall(offset, limit, minChangeVersion, maxChangeVersion, totalCount, localCourseCode, schoolId, schoolYear, sessionName, courseCode, educationOrganizationId, id, instructionalTimePlanned, localCourseTitle, snapshotIdentifier, _callback);
        Type localVarReturnType = new TypeToken<List<EdFiCourseOffering>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCourseOfferingsById
     * @param id A resource identifier that uniquely identifies the resource. (required)
     * @param ifNoneMatch The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)
     * @param snapshotIdentifier Indicates the Snapshot-Identifier that should be used. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The requested resource was successfully retrieved. </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> The resource&#39;s current server-side ETag value matched the If-None-Match header value supplied with the request indicating the resource has not been modified. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The resource could not be found. </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone. An attempt to connect to the database for the snapshot specified by the Snapshot-Identifier header was unsuccessful (indicating the snapshot may have been removed). </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unhandled error occurred on the server. See the response body for details. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCourseOfferingsByIdCall(String id, String ifNoneMatch, String snapshotIdentifier, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ed-fi/courseOfferings/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (ifNoneMatch != null) {
            localVarHeaderParams.put("If-None-Match", localVarApiClient.parameterToString(ifNoneMatch));
        }

        if (snapshotIdentifier != null) {
            localVarHeaderParams.put("Snapshot-Identifier", localVarApiClient.parameterToString(snapshotIdentifier));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2_client_credentials" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCourseOfferingsByIdValidateBeforeCall(String id, String ifNoneMatch, String snapshotIdentifier, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getCourseOfferingsById(Async)");
        }
        

        okhttp3.Call localVarCall = getCourseOfferingsByIdCall(id, ifNoneMatch, snapshotIdentifier, _callback);
        return localVarCall;

    }

    /**
     * Retrieves a specific resource using the resource&#39;s identifier (using the \&quot;Get By Id\&quot; pattern).
     * This GET operation retrieves a resource by the specified resource identifier.
     * @param id A resource identifier that uniquely identifies the resource. (required)
     * @param ifNoneMatch The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)
     * @param snapshotIdentifier Indicates the Snapshot-Identifier that should be used. (optional)
     * @return EdFiCourseOffering
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The requested resource was successfully retrieved. </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> The resource&#39;s current server-side ETag value matched the If-None-Match header value supplied with the request indicating the resource has not been modified. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The resource could not be found. </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone. An attempt to connect to the database for the snapshot specified by the Snapshot-Identifier header was unsuccessful (indicating the snapshot may have been removed). </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unhandled error occurred on the server. See the response body for details. </td><td>  -  </td></tr>
     </table>
     */
    public EdFiCourseOffering getCourseOfferingsById(String id, String ifNoneMatch, String snapshotIdentifier) throws ApiException {
        ApiResponse<EdFiCourseOffering> localVarResp = getCourseOfferingsByIdWithHttpInfo(id, ifNoneMatch, snapshotIdentifier);
        return localVarResp.getData();
    }

    /**
     * Retrieves a specific resource using the resource&#39;s identifier (using the \&quot;Get By Id\&quot; pattern).
     * This GET operation retrieves a resource by the specified resource identifier.
     * @param id A resource identifier that uniquely identifies the resource. (required)
     * @param ifNoneMatch The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)
     * @param snapshotIdentifier Indicates the Snapshot-Identifier that should be used. (optional)
     * @return ApiResponse&lt;EdFiCourseOffering&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The requested resource was successfully retrieved. </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> The resource&#39;s current server-side ETag value matched the If-None-Match header value supplied with the request indicating the resource has not been modified. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The resource could not be found. </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone. An attempt to connect to the database for the snapshot specified by the Snapshot-Identifier header was unsuccessful (indicating the snapshot may have been removed). </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unhandled error occurred on the server. See the response body for details. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EdFiCourseOffering> getCourseOfferingsByIdWithHttpInfo(String id, String ifNoneMatch, String snapshotIdentifier) throws ApiException {
        okhttp3.Call localVarCall = getCourseOfferingsByIdValidateBeforeCall(id, ifNoneMatch, snapshotIdentifier, null);
        Type localVarReturnType = new TypeToken<EdFiCourseOffering>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves a specific resource using the resource&#39;s identifier (using the \&quot;Get By Id\&quot; pattern). (asynchronously)
     * This GET operation retrieves a resource by the specified resource identifier.
     * @param id A resource identifier that uniquely identifies the resource. (required)
     * @param ifNoneMatch The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)
     * @param snapshotIdentifier Indicates the Snapshot-Identifier that should be used. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The requested resource was successfully retrieved. </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> The resource&#39;s current server-side ETag value matched the If-None-Match header value supplied with the request indicating the resource has not been modified. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The resource could not be found. </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone. An attempt to connect to the database for the snapshot specified by the Snapshot-Identifier header was unsuccessful (indicating the snapshot may have been removed). </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unhandled error occurred on the server. See the response body for details. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCourseOfferingsByIdAsync(String id, String ifNoneMatch, String snapshotIdentifier, final ApiCallback<EdFiCourseOffering> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCourseOfferingsByIdValidateBeforeCall(id, ifNoneMatch, snapshotIdentifier, _callback);
        Type localVarReturnType = new TypeToken<EdFiCourseOffering>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postCourseOffering
     * @param courseOffering The JSON representation of the \&quot;courseOffering\&quot; resource to be created or updated. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The resource was updated.  An updated ETag value is available in the ETag header of the response. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> The resource was created.  An ETag value is available in the ETag header, and the location of the resource is available in the Location header of the response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed. </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Is Not Allowed. When the Snapshot-Identifier header is present the method is not allowed. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details. </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> The resource&#39;s current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unhandled error occurred on the server. See the response body for details. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postCourseOfferingCall(EdFiCourseOffering courseOffering, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = courseOffering;

        // create path and map variables
        String localVarPath = "/ed-fi/courseOfferings";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2_client_credentials" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postCourseOfferingValidateBeforeCall(EdFiCourseOffering courseOffering, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'courseOffering' is set
        if (courseOffering == null) {
            throw new ApiException("Missing the required parameter 'courseOffering' when calling postCourseOffering(Async)");
        }
        

        okhttp3.Call localVarCall = postCourseOfferingCall(courseOffering, _callback);
        return localVarCall;

    }

    /**
     * Creates or updates resources based on the natural key values of the supplied resource.
     * The POST operation can be used to create or update resources. In database terms, this is often referred to as an \&quot;upsert\&quot; operation (insert + update). Clients should NOT include the resource \&quot;id\&quot; in the JSON body because it will result in an error. The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately. It is recommended to use POST for both create and update except while updating natural key of a resource in which case PUT operation must be used.
     * @param courseOffering The JSON representation of the \&quot;courseOffering\&quot; resource to be created or updated. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The resource was updated.  An updated ETag value is available in the ETag header of the response. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> The resource was created.  An ETag value is available in the ETag header, and the location of the resource is available in the Location header of the response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed. </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Is Not Allowed. When the Snapshot-Identifier header is present the method is not allowed. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details. </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> The resource&#39;s current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unhandled error occurred on the server. See the response body for details. </td><td>  -  </td></tr>
     </table>
     */
    public void postCourseOffering(EdFiCourseOffering courseOffering) throws ApiException {
        postCourseOfferingWithHttpInfo(courseOffering);
    }

    /**
     * Creates or updates resources based on the natural key values of the supplied resource.
     * The POST operation can be used to create or update resources. In database terms, this is often referred to as an \&quot;upsert\&quot; operation (insert + update). Clients should NOT include the resource \&quot;id\&quot; in the JSON body because it will result in an error. The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately. It is recommended to use POST for both create and update except while updating natural key of a resource in which case PUT operation must be used.
     * @param courseOffering The JSON representation of the \&quot;courseOffering\&quot; resource to be created or updated. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The resource was updated.  An updated ETag value is available in the ETag header of the response. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> The resource was created.  An ETag value is available in the ETag header, and the location of the resource is available in the Location header of the response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed. </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Is Not Allowed. When the Snapshot-Identifier header is present the method is not allowed. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details. </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> The resource&#39;s current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unhandled error occurred on the server. See the response body for details. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> postCourseOfferingWithHttpInfo(EdFiCourseOffering courseOffering) throws ApiException {
        okhttp3.Call localVarCall = postCourseOfferingValidateBeforeCall(courseOffering, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Creates or updates resources based on the natural key values of the supplied resource. (asynchronously)
     * The POST operation can be used to create or update resources. In database terms, this is often referred to as an \&quot;upsert\&quot; operation (insert + update). Clients should NOT include the resource \&quot;id\&quot; in the JSON body because it will result in an error. The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately. It is recommended to use POST for both create and update except while updating natural key of a resource in which case PUT operation must be used.
     * @param courseOffering The JSON representation of the \&quot;courseOffering\&quot; resource to be created or updated. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The resource was updated.  An updated ETag value is available in the ETag header of the response. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> The resource was created.  An ETag value is available in the ETag header, and the location of the resource is available in the Location header of the response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed. </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Is Not Allowed. When the Snapshot-Identifier header is present the method is not allowed. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details. </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> The resource&#39;s current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unhandled error occurred on the server. See the response body for details. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postCourseOfferingAsync(EdFiCourseOffering courseOffering, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = postCourseOfferingValidateBeforeCall(courseOffering, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for putCourseOffering
     * @param id A resource identifier that uniquely identifies the resource. (required)
     * @param courseOffering The JSON representation of the \&quot;courseOffering\&quot; resource to be created or updated. (required)
     * @param ifMatch The ETag header value used to prevent the PUT from updating a resource modified by another consumer. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was updated.  An updated ETag value is available in the ETag header of the response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The resource could not be found. </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Is Not Allowed. When the Snapshot-Identifier header is present the method is not allowed. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details. </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> The resource&#39;s current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unhandled error occurred on the server. See the response body for details. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putCourseOfferingCall(String id, EdFiCourseOffering courseOffering, String ifMatch, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = courseOffering;

        // create path and map variables
        String localVarPath = "/ed-fi/courseOfferings/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (ifMatch != null) {
            localVarHeaderParams.put("If-Match", localVarApiClient.parameterToString(ifMatch));
        }

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2_client_credentials" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putCourseOfferingValidateBeforeCall(String id, EdFiCourseOffering courseOffering, String ifMatch, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling putCourseOffering(Async)");
        }
        
        // verify the required parameter 'courseOffering' is set
        if (courseOffering == null) {
            throw new ApiException("Missing the required parameter 'courseOffering' when calling putCourseOffering(Async)");
        }
        

        okhttp3.Call localVarCall = putCourseOfferingCall(id, courseOffering, ifMatch, _callback);
        return localVarCall;

    }

    /**
     * Updates a resource based on the resource identifier.
     * The PUT operation is used to update a resource by identifier. If the resource identifier (\&quot;id\&quot;) is provided in the JSON body, it will be ignored. Additionally, this API resource is not configured for cascading natural key updates. Natural key values for this resource cannot be changed using PUT operation and will not be modified in the database, and so recommendation is to use POST as that supports upsert behavior.
     * @param id A resource identifier that uniquely identifies the resource. (required)
     * @param courseOffering The JSON representation of the \&quot;courseOffering\&quot; resource to be created or updated. (required)
     * @param ifMatch The ETag header value used to prevent the PUT from updating a resource modified by another consumer. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was updated.  An updated ETag value is available in the ETag header of the response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The resource could not be found. </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Is Not Allowed. When the Snapshot-Identifier header is present the method is not allowed. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details. </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> The resource&#39;s current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unhandled error occurred on the server. See the response body for details. </td><td>  -  </td></tr>
     </table>
     */
    public void putCourseOffering(String id, EdFiCourseOffering courseOffering, String ifMatch) throws ApiException {
        putCourseOfferingWithHttpInfo(id, courseOffering, ifMatch);
    }

    /**
     * Updates a resource based on the resource identifier.
     * The PUT operation is used to update a resource by identifier. If the resource identifier (\&quot;id\&quot;) is provided in the JSON body, it will be ignored. Additionally, this API resource is not configured for cascading natural key updates. Natural key values for this resource cannot be changed using PUT operation and will not be modified in the database, and so recommendation is to use POST as that supports upsert behavior.
     * @param id A resource identifier that uniquely identifies the resource. (required)
     * @param courseOffering The JSON representation of the \&quot;courseOffering\&quot; resource to be created or updated. (required)
     * @param ifMatch The ETag header value used to prevent the PUT from updating a resource modified by another consumer. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was updated.  An updated ETag value is available in the ETag header of the response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The resource could not be found. </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Is Not Allowed. When the Snapshot-Identifier header is present the method is not allowed. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details. </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> The resource&#39;s current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unhandled error occurred on the server. See the response body for details. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> putCourseOfferingWithHttpInfo(String id, EdFiCourseOffering courseOffering, String ifMatch) throws ApiException {
        okhttp3.Call localVarCall = putCourseOfferingValidateBeforeCall(id, courseOffering, ifMatch, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Updates a resource based on the resource identifier. (asynchronously)
     * The PUT operation is used to update a resource by identifier. If the resource identifier (\&quot;id\&quot;) is provided in the JSON body, it will be ignored. Additionally, this API resource is not configured for cascading natural key updates. Natural key values for this resource cannot be changed using PUT operation and will not be modified in the database, and so recommendation is to use POST as that supports upsert behavior.
     * @param id A resource identifier that uniquely identifies the resource. (required)
     * @param courseOffering The JSON representation of the \&quot;courseOffering\&quot; resource to be created or updated. (required)
     * @param ifMatch The ETag header value used to prevent the PUT from updating a resource modified by another consumer. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was updated.  An updated ETag value is available in the ETag header of the response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The resource could not be found. </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Is Not Allowed. When the Snapshot-Identifier header is present the method is not allowed. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details. </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> The resource&#39;s current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unhandled error occurred on the server. See the response body for details. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putCourseOfferingAsync(String id, EdFiCourseOffering courseOffering, String ifMatch, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = putCourseOfferingValidateBeforeCall(id, courseOffering, ifMatch, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
